/*
Copyright 2020 The SuperEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/superedge/superedge/pkg/application-grid-controller/apis/superedge.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeploymentGridLister helps list DeploymentGrids.
// All objects returned here must be treated as read-only.
type DeploymentGridLister interface {
	// List lists all DeploymentGrids in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DeploymentGrid, err error)
	// DeploymentGrids returns an object that can list and get DeploymentGrids.
	DeploymentGrids(namespace string) DeploymentGridNamespaceLister
	DeploymentGridListerExpansion
}

// deploymentGridLister implements the DeploymentGridLister interface.
type deploymentGridLister struct {
	indexer cache.Indexer
}

// NewDeploymentGridLister returns a new DeploymentGridLister.
func NewDeploymentGridLister(indexer cache.Indexer) DeploymentGridLister {
	return &deploymentGridLister{indexer: indexer}
}

// List lists all DeploymentGrids in the indexer.
func (s *deploymentGridLister) List(selector labels.Selector) (ret []*v1.DeploymentGrid, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DeploymentGrid))
	})
	return ret, err
}

// DeploymentGrids returns an object that can list and get DeploymentGrids.
func (s *deploymentGridLister) DeploymentGrids(namespace string) DeploymentGridNamespaceLister {
	return deploymentGridNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeploymentGridNamespaceLister helps list and get DeploymentGrids.
// All objects returned here must be treated as read-only.
type DeploymentGridNamespaceLister interface {
	// List lists all DeploymentGrids in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DeploymentGrid, err error)
	// Get retrieves the DeploymentGrid from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.DeploymentGrid, error)
	DeploymentGridNamespaceListerExpansion
}

// deploymentGridNamespaceLister implements the DeploymentGridNamespaceLister
// interface.
type deploymentGridNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeploymentGrids in the indexer for a given namespace.
func (s deploymentGridNamespaceLister) List(selector labels.Selector) (ret []*v1.DeploymentGrid, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DeploymentGrid))
	})
	return ret, err
}

// Get retrieves the DeploymentGrid from the indexer for a given namespace and name.
func (s deploymentGridNamespaceLister) Get(name string) (*v1.DeploymentGrid, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("deploymentgrid"), name)
	}
	return obj.(*v1.DeploymentGrid), nil
}
