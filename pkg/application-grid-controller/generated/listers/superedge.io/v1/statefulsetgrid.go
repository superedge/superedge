/*
Copyright 2020 The SuperEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/superedge/superedge/pkg/application-grid-controller/apis/superedge.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StatefulSetGridLister helps list StatefulSetGrids.
// All objects returned here must be treated as read-only.
type StatefulSetGridLister interface {
	// List lists all StatefulSetGrids in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.StatefulSetGrid, err error)
	// StatefulSetGrids returns an object that can list and get StatefulSetGrids.
	StatefulSetGrids(namespace string) StatefulSetGridNamespaceLister
	StatefulSetGridListerExpansion
}

// statefulSetGridLister implements the StatefulSetGridLister interface.
type statefulSetGridLister struct {
	indexer cache.Indexer
}

// NewStatefulSetGridLister returns a new StatefulSetGridLister.
func NewStatefulSetGridLister(indexer cache.Indexer) StatefulSetGridLister {
	return &statefulSetGridLister{indexer: indexer}
}

// List lists all StatefulSetGrids in the indexer.
func (s *statefulSetGridLister) List(selector labels.Selector) (ret []*v1.StatefulSetGrid, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StatefulSetGrid))
	})
	return ret, err
}

// StatefulSetGrids returns an object that can list and get StatefulSetGrids.
func (s *statefulSetGridLister) StatefulSetGrids(namespace string) StatefulSetGridNamespaceLister {
	return statefulSetGridNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StatefulSetGridNamespaceLister helps list and get StatefulSetGrids.
// All objects returned here must be treated as read-only.
type StatefulSetGridNamespaceLister interface {
	// List lists all StatefulSetGrids in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.StatefulSetGrid, err error)
	// Get retrieves the StatefulSetGrid from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.StatefulSetGrid, error)
	StatefulSetGridNamespaceListerExpansion
}

// statefulSetGridNamespaceLister implements the StatefulSetGridNamespaceLister
// interface.
type statefulSetGridNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StatefulSetGrids in the indexer for a given namespace.
func (s statefulSetGridNamespaceLister) List(selector labels.Selector) (ret []*v1.StatefulSetGrid, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.StatefulSetGrid))
	})
	return ret, err
}

// Get retrieves the StatefulSetGrid from the indexer for a given namespace and name.
func (s statefulSetGridNamespaceLister) Get(name string) (*v1.StatefulSetGrid, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("statefulsetgrid"), name)
	}
	return obj.(*v1.StatefulSetGrid), nil
}
