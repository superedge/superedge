// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	superedgeiov1 "github.com/superedge/superedge/pkg/application-grid-controller/apis/superedge.io/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeStatefulSetGrids implements StatefulSetGridInterface
type FakeStatefulSetGrids struct {
	Fake *FakeSuperedgeV1
	ns   string
}

var statefulsetgridsResource = schema.GroupVersionResource{Group: "superedge.io", Version: "v1", Resource: "statefulsetgrids"}

var statefulsetgridsKind = schema.GroupVersionKind{Group: "superedge.io", Version: "v1", Kind: "StatefulSetGrid"}

// Get takes name of the statefulSetGrid, and returns the corresponding statefulSetGrid object, and an error if there is any.
func (c *FakeStatefulSetGrids) Get(ctx context.Context, name string, options v1.GetOptions) (result *superedgeiov1.StatefulSetGrid, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(statefulsetgridsResource, c.ns, name), &superedgeiov1.StatefulSetGrid{})

	if obj == nil {
		return nil, err
	}
	return obj.(*superedgeiov1.StatefulSetGrid), err
}

// List takes label and field selectors, and returns the list of StatefulSetGrids that match those selectors.
func (c *FakeStatefulSetGrids) List(ctx context.Context, opts v1.ListOptions) (result *superedgeiov1.StatefulSetGridList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(statefulsetgridsResource, statefulsetgridsKind, c.ns, opts), &superedgeiov1.StatefulSetGridList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &superedgeiov1.StatefulSetGridList{ListMeta: obj.(*superedgeiov1.StatefulSetGridList).ListMeta}
	for _, item := range obj.(*superedgeiov1.StatefulSetGridList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested statefulSetGrids.
func (c *FakeStatefulSetGrids) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(statefulsetgridsResource, c.ns, opts))

}

// Create takes the representation of a statefulSetGrid and creates it.  Returns the server's representation of the statefulSetGrid, and an error, if there is any.
func (c *FakeStatefulSetGrids) Create(ctx context.Context, statefulSetGrid *superedgeiov1.StatefulSetGrid, opts v1.CreateOptions) (result *superedgeiov1.StatefulSetGrid, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(statefulsetgridsResource, c.ns, statefulSetGrid), &superedgeiov1.StatefulSetGrid{})

	if obj == nil {
		return nil, err
	}
	return obj.(*superedgeiov1.StatefulSetGrid), err
}

// Update takes the representation of a statefulSetGrid and updates it. Returns the server's representation of the statefulSetGrid, and an error, if there is any.
func (c *FakeStatefulSetGrids) Update(ctx context.Context, statefulSetGrid *superedgeiov1.StatefulSetGrid, opts v1.UpdateOptions) (result *superedgeiov1.StatefulSetGrid, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(statefulsetgridsResource, c.ns, statefulSetGrid), &superedgeiov1.StatefulSetGrid{})

	if obj == nil {
		return nil, err
	}
	return obj.(*superedgeiov1.StatefulSetGrid), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeStatefulSetGrids) UpdateStatus(ctx context.Context, statefulSetGrid *superedgeiov1.StatefulSetGrid, opts v1.UpdateOptions) (*superedgeiov1.StatefulSetGrid, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(statefulsetgridsResource, "status", c.ns, statefulSetGrid), &superedgeiov1.StatefulSetGrid{})

	if obj == nil {
		return nil, err
	}
	return obj.(*superedgeiov1.StatefulSetGrid), err
}

// Delete takes name of the statefulSetGrid and deletes it. Returns an error if one occurs.
func (c *FakeStatefulSetGrids) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(statefulsetgridsResource, c.ns, name), &superedgeiov1.StatefulSetGrid{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeStatefulSetGrids) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(statefulsetgridsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &superedgeiov1.StatefulSetGridList{})
	return err
}

// Patch applies the patch and returns the patched statefulSetGrid.
func (c *FakeStatefulSetGrids) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *superedgeiov1.StatefulSetGrid, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(statefulsetgridsResource, c.ns, name, pt, data, subresources...), &superedgeiov1.StatefulSetGrid{})

	if obj == nil {
		return nil, err
	}
	return obj.(*superedgeiov1.StatefulSetGrid), err
}
